name: dockerfile

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'v*'
  pull_request:
    branches:
      - 'master'
      - 'v*'

env:
  REPO_SLUG_ORIGIN: "moby/buildkit:latest"
  CACHE_GHA_SCOPE_IT: "dockerfile-tests"

jobs:
  base:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Build ${{ env.CACHE_GHA_SCOPE_IT }}
        run: |
          ./hack/build_ci_first_pass integration-tests
        env:
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}
          CACHE_TO: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}

  test:
    runs-on: ubuntu-latest
    needs: [base]
    strategy:
      fail-fast: false
      matrix:
        worker:
          - containerd
          - containerd-1.5
          - containerd-1.4
          - containerd-snapshotter-stargz
          - oci
          - oci-rootless
          - oci-snapshotter-stargz
        dfile_ref:
          - ''  # empty string means picked up from go.mod
          - 'https://github.com/crazy-max/dockerfile.git#master'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=${{ env.REPO_SLUG_ORIGIN }}
          buildkitd-flags: --debug
      -
        name: Test
        run: |
          export TESTFLAGS="-v --parallel=6 --timeout=20m"
          if [ -n "${{ matrix.worker }}" ]; then
            export TESTFLAGS="${TESTFLAGS} --run=//worker=${{ matrix.worker }}$"
          fi
          ./hack/test dockerfile
        env:
          DFILE_REF: ${{ matrix.dfile_ref }}
          SKIP_INTEGRATION_TESTS: 1
          CACHE_FROM: type=gha,scope=${{ env.CACHE_GHA_SCOPE_IT }}
