#!/usr/bin/env bash
export BUILDX_NO_DEFAULT_LOAD=true

: ${PREFER_BUILDCTL=}
: ${PREFER_LEGACY=}
: ${CI=}
: ${GITHUB_ACTIONS=}
: ${CACHE_FROM=}
: ${CACHE_TO=}
: ${DFILE_REF=}

if [ "$PREFER_BUILDCTL" = "1" ]; then
  echo >&2 "WARNING: PREFER_BUILDCTL is no longer supported. Ignoring."
fi

if [ "$PREFER_LEGACY" = "1" ]; then
  echo >&2 "WARNING: PREFER_LEGACY is no longer supported. Ignoring."
fi

progressFlag=""
if [ "$CI" = "true" ]; then
  progressFlag="--progress=plain"
fi

buildxCmd() {
  if docker buildx version >/dev/null 2>&1; then
    set -x
    docker buildx "$@" $progressFlag
  elif buildx version >/dev/null 2>&1; then
    set -x
    buildx "$@" $progressFlag
  else
    topdir="$(realpath $(dirname "$0")/..)"
    if [ ! -x "${topdir}/bin/buildx" ]; then
      set -x
      "${topdir}/hack/install-buildx"
    fi
    set -x
    bootstrapName="moby-buildkit"
    "${topdir}/hack/bootstrap-buildx" "${bootstrapName}"
    BUILDX_BUILDER="${bootstrapName}" "${topdir}/bin/buildx" "$@" $progressFlag
  fi
}

currentref=""
currentcontext="."
cacheFromFlags=""
cacheToFlags=""
if [ "$GITHUB_ACTIONS" = "true" ]; then
  currentref="https://github.com/$GITHUB_REPOSITORY.git#$GITHUB_REF"
  if [ -n "$CACHE_FROM" ]; then
    for cfrom in $CACHE_FROM; do
      cacheFromFlags="${cacheFromFlags}--cache-from=$cfrom "
    done
  fi
  if [ -n "$CACHE_TO" ]; then
    for cto in $CACHE_TO; do
      cacheToFlags="${cacheToFlags}--cache-to=$cto "
    done
  fi
fi
if [ -n "$currentref" ]; then
  currentcontext="--build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=1 $currentref"
fi

if [ -z "$DFILE_REF" ]; then
  dfileRepo=docker/dockerfile
  dfileReplace=$(go list -mod=mod -u -m -f '{{.Replace.Path}}' "github.com/${dfileRepo}")
  if [ -n "$dfileReplace" ]; then
    # replace found, get dockerfile version from it instead
    dfileVersion=$(go list -mod=mod -u -m -f '{{.Replace.Version}}' "github.com/${dfileRepo}")
    # also set the right repo from replace
    dfileRepo=${dfileReplace#github.com/}
  else
    # get dockerfile version from go.mod
    dfileVersion=$(go list -mod=mod -u -m -f '{{.Version}}' "github.com/${dfileRepo}")
  fi
  if [[ "${dfileVersion}" == *-*-* ]]; then
    # if pseudo-version, figure out just the uncommon sha (https://github.com/golang/go/issues/34745)
    dfileVersion=$(echo "${dfileVersion}" | awk -F"-" '{print $NF}' | awk 'BEGIN{FIELDWIDTHS="7"} {print $1}')
    # use github api to return full sha to be able to use it as ref for git remote context
    dfileVersion=$(curl -s "https://api.github.com/repos/${dfileRepo}/commits/${dfileVersion}" | jq -r .sha)
  fi
  DFILE_REF="https://github.com/${dfileRepo}.git#${dfileVersion}"
fi
